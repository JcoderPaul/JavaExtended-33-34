******* Class Formatter *******

Наследует и реализует: public final class Formatter
                       extends Object
                       implements Closeable, Flushable

Интерпретатор строк формата в стиле printf. Этот класс обеспечивает поддержку
выравнивания и выравнивания макета, общие форматы для числовых, строковых данных
и данных даты/времени, а также выходные данные, зависящие от локали.

Поддерживаются распространенные типы Java, такие, как byte, BigDecimal и Calendar.
Ограниченная настройка форматирования для произвольных типов пользователей предоставляется
через интерфейс Formattable.

Форматтеры НЕ безопасны для многопоточного использования. Безопасность в многопоточном
программировании является обязательной и в данном случае ложится на плечи пользователей
методов этого класса.

Форматированная печать для языка Java похожа на реализацию printf языка C. Хотя строки
формата аналогичны C, были сделаны некоторые настройки, чтобы приспособиться к языку Java
и использовать некоторые его функции. Кроме того, форматирование в Java более строгое,
чем в C. Например, если преобразование несовместимо с флагом, будет выдано исключение.
В C неприменимые флаги молча игнорируются. Таким образом, строки формата должны быть
узнаваемы программистами на C, но не обязательно полностью совместимы со строками на C.

Простые реализации метода см. в примерах: Less_34_Printf_Step1

******* Синтаксис *******

Каждый метод, производящий форматированный вывод, требует строки формата и
списка аргументов. Строка формата — это строка, которая может содержать
фиксированный текст и один или несколько встроенных спецификаторов формата.
Рассмотрим следующий пример:
-----------------------------------------------------------------------------
Calendar c = ...;
String s = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c);
-----------------------------------------------------------------------------
Отформатированная строка является первым аргументом метода *.format().
Где содержится три спецификатора формата «%1$tm», «%1$te» и «%1$tY»,
которые указывают, как следует обрабатывать аргументы и где их следует
вставлять в текст. Остальные части строки это обычный фиксированный текст,
включая 'Dukes Birthday:' и любые другие пробелы или знаки препинания.
Список аргументов состоит из всех аргументов, переданных после
отформатированной строки. В приведенном выше примере список аргументов
состоит из одного элемента - объекта Calendar c.

*** Спецификаторы формата для общих, символьных и числовых типов имеют
    следующий синтаксис:
-------------------------------------------------------------------------------------------
     %[argument_index$][flags][width][.precision]conversion
-------------------------------------------------------------------------------------------
    - Необязательный [argument_index$] — это десятичное целое число, указывающее позицию
      аргумента в списке аргументов. На первый аргумент ссылается «1$», на второй — «2$»
      и т. д.
    - Необязательный [flags] — это набор символов, которые изменяют выходной формат.
      Набор допустимых флагов зависит от преобразования.
    - Необязательный [width] - представляет собой неотрицательное десятичное целое число,
      указывающее минимальное количество символов, которое должно быть записано в вывод.
    - Необязательный [.precision] — это неотрицательное десятичное целое число, обычно
      используемое для ограничения количества символов. Конкретное поведение зависит
      от преобразования.
    - Требуемое 'conversion' — это символ, указывающий, как должен быть отформатирован
      аргумент, набор допустимых преобразований для данного аргумента зависит от типа
      данных аргумента.

*** Спецификаторы формата для типов, которые используются для представления даты и времени,
    имеют следующий синтаксис:
-------------------------------------------------------------------------------------------
    %[argument_index$][flags][width]conversion
-------------------------------------------------------------------------------------------
    - Необязательный [argument_index$], флаги и ширина определяются, как указано выше.
    - Требуемое преобразование представляет собой последовательность из двух символов.
      Первый символ — «t» или «T». Второй символ указывает используемый формат. Эти
      символы похожи, но не полностью идентичны тем, которые определены в GNU date и
      POSIX strftime(3c).

*** Спецификаторы формата, не соответствующие аргументам, имеют следующий синтаксис:
    %[flags][width]conversion
    - Необязательные [flags] и [width] определяются, как указано выше.
    - Требуемое 'conversion' — это символ, указывающий содержимое, которое
      необходимо вставить в вывод.

******* Преобразования *******

Преобразования делятся на следующие категории:
1. General - может применяться к любому типу аргумента;
2. Character - может применяться к базовым типам, представляющим символы Unicode:
               char, Character, byte, Byte, short и Short. Это преобразование также
               может быть применено к типам int и Integer, когда
               Character.isValidCodePoint(int) возвращает значение true.
3. Numeric
    - Integral - может применяться к целочисленным типам Java:
                 byte, Byte, short, Short, int и Integer, long, Long и BigInteger.
    - Floating Point - может применяться к типам с плавающей запятой Java:
                       float, Float, double, Double и BigDecimal.
4. Date/Time - может применяться к типам Java, способным кодировать дату или время:
               long, Long, Calendar и Date.
5. Percent - выводит литеральное "%" ('\u0025')
6. Line Separator - создает разделитель строк для конкретной платформы.

В следующей таблице приведены поддерживаемые преобразования. Преобразования,
обозначенные символом верхнего регистра (например, «B», «H», «S», «C», «X»,
«E», «G», «A» и «T») одинаковы, как и для соответствующих символов преобразования
нижнего регистра, за исключением того, что результат преобразуется в верхний
регистр в соответствии с правилами преобладающей локалью. Результат эквивалентен
следующему вызову String.toUpperCase().
-------------------------------------------------------------------------------------------
Conversion | Argument Category | Description
-------------------------------------------------------------------------------------------
'b', 'B'   | general	       | Если аргумент arg равен null, то результатом будет false.
           |                   | Если arg является boolean или Boolean, то результатом является
           |                   | строка, возвращаемая String.valueOf(arg). В противном случае
           |                   | результат является true.
-------------------------------------------------------------------------------------------
'h', 'H'   | general	       | Если аргумент arg равен null, то и результатом будет null.
           |                   | В противном случае результат получается вызовом
           |                   | Integer.toHexString(arg.hashCode()).
-------------------------------------------------------------------------------------------
's', 'S'   | general	       | Если аргумент arg равен null, то результатом будет null. Если
           |                   | arg реализует Formattable, то вызывается arg.formatTo. В противном
           |                   | случае результат получается вызовом arg.toString().
-------------------------------------------------------------------------------------------
'c', 'C'   | character         | Результат - символ Unicode
'd'        | integral          | Результат форматируется как десятичное целое
'o'        | integral          | Результат форматируется как восьмеричное целое
'x', 'X'   | integral          | Результат форматируется как шестнадцатеричное целое
-------------------------------------------------------------------------------------------
'e', 'E'   | floating point    | Результат отформатирован как десятичное число в компьютеризированной
           |                   | экспоненциальной системе счисления.
-------------------------------------------------------------------------------------------
'f'        | floating point    | Результат форматируется как десятичное число
-------------------------------------------------------------------------------------------
'g', 'G'   | floating point    | Результат форматируется с использованием компьютеризированной
           |                   | экспоненциальной записи или десятичного формата, в зависимости от
           |                   | точности и значения после округления.
-------------------------------------------------------------------------------------------
'a', 'A'   | floating point    | Результат форматируется как шестнадцатеричное число с плавающей
           |                   | запятой и показателем степени.
-------------------------------------------------------------------------------------------
't', 'T'   | date/time         | Префикс для символов преобразования даты и времени.
'%'        | percent           | Результатом является литерал '%'('\u0025')
'n'        | line separator    | Результатом является разделитель строк для конкретной платформы.
-------------------------------------------------------------------------------------------
Любые символы, не определенные явно как преобразования, недопустимы и зарезервированы для
будущих расширений.

******* Преобразование даты/времени *******

Следующие символы суффикса преобразования даты и времени определены для преобразований 't' и 'T'.
Типы похожи, но не полностью идентичны тем, которые определены GNU date и POSIX strftime(3c).
Дополнительные типы преобразования предоставляются для доступа к функциям, специфичным для Java
(например, 'L' для миллисекунд в пределах секунды).

Для форматирования времени используются следующие символы преобразования:

'H' - Час дня для 24-часового формата, отформатированный как две цифры с
      начальным нулем, если необходимо -> 00 - 23
'I' - Час для 12-часового формата, отформатированный как две цифры с
      начальным нулем, если необходимо -> 01 - 12
'k' - Час дня для 24-часового формата -> 0 - 23
'l' - Час для 12-часового формата -> 1 - 12
'M' - Минуты в течение часа отформатированы как две цифры с начальным нулем,
      если необходимо -> 00 - 59
'S' - Секунды в течение минуты, отформатированные как две цифры с начальным
      нулем, если это необходимо, -> 00 - 60 ("60" - это специальное значение,
      необходимое для поддержки високосных секунд).
'L' - Миллисекунды в пределах секунды отформатированы как три цифры с начальными
      нулями, если это необходимо -> 000 - 999
'N' - Наносекунда в пределах секунды, отформатированная как девять цифр с начальными
      нулями, если необходимо -> 000000000 - 999999999
'p' - Утренний или дневной маркер для конкретного региона в нижнем регистре, например,
      "am" или "pm". Использование префикса преобразования переводит 'T' этот вывод в
      верхний регистр.
'z' - Числовое смещение часового пояса в стиле RFC 822-0800 относительно GMT, например.
      Это значение будет скорректировано по мере необходимости для перехода на летнее
      время. Для long, Long и Date используемый часовой пояс является часовым поясом
      по умолчанию для этого экземпляра виртуальной машины Java.
'Z' - Строка, представляющая аббревиатуру часового пояса. Это значение будет скорректировано
      по мере необходимости для перехода на летнее время. Для long, Long и Date используемый
      часовой пояс является часовым поясом по умолчанию для этого экземпляра виртуальной машины
      Java. Языковой стандарт Formatter заменит языковой стандарт аргумента (если есть).
's' - Секунды с начала эпохи, начинающейся с 1 января 1970 года по 00:00:00 всемирному
      координированному времени, т.е. Long.MIN_VALUE/1000 до Long.MAX_VALUE/1000.
'Q' - Миллисекунды с начала эпохи, начиная с 1 января 1970 года по 00:00:00 всемирному
      координированному времени, т.е. Long.MIN_VALUE до Long.MAX_VALUE.

Для форматирования дат используются следующие символы преобразования:

'B' - Полное название месяца для конкретной локали, например "January", "February".
'b' - Сокращенное название месяца для конкретной локали, например "Jan", "Feb".
'h' - То же, что 'b'.
'A' - Полное название дня недели для конкретной локали, например "Sunday", "Monday".
'a' - Краткое название дня недели для конкретной локали, например "Sun", "Mon".
'C' - Четырехзначный год, разделенный на 100, отформатированный как две цифры с
      начальным нулем, если необходимо, т.е. 00 - 99
'Y' - Год, отформатированный как минимум четырьмя цифрами с начальными нулями, если
      необходимо, например, 0092 равен 92 CE для Григорианского календаря.
'y' - Последние две цифры года, отформатированные с начальными нулями, если
      необходимо -> 00 - 99
'j' - День года, отформатированный как три цифры с начальными нулями, если это
      необходимо, например 001 - 366 для Григорианского календаря.
'm' - Месяц, отформатированный как две цифры с начальными нулями, если это
      необходимо -> 01 - 13
'd' - День месяца, отформатированный как две цифры с ведущими нулями при
      необходимости -> 01 - 31
'e' - День месяца в формате двух цифр -> 1 - 31

Следующие символы преобразования используются для форматирования общих
композиций даты/времени:

'R' - Время, отформатированное для 24-часового формата, как"%tH:%tM"
'T' - Время в 24-часовом формате в формате "%tH:%tM:%tS".
'r' - Время в формате 12-часового формата в формате "%tI:%tM:%tS %Tp".
      Расположение утреннего или дневного маркера ('%Tp') может зависеть
      от региона.
'D' - Дата в формате "%tm/%td/%ty".
'F' - Полная дата ISO в формате 8601"%tY-%tm-%td" .
'c' - Дата и время в формате "%ta %tb %td %tT %tZ %tY",
      например "Sun Jul 20 16:17:00 EDT 1969".

Любые символы, не определенные явно как суффиксы преобразования даты/времени,
являются недопустимыми и зарезервированы для будущих расширений.

******* Флаги *******
Флаг поддерживается для конкретного типа аргумента.
'-' - Результат будет выравниваться по левому краю.
'#' - Результат должен использовать альтернативную форму, зависящую от конверсии.
'+' - Результат всегда будет включать знак
' ' - Результат будет включать начальный пробел для положительных значений.
'0' - Результат будет дополнен нулями
',' - Результат будет включать разделители группировок ',' зависящие от локали.
'(' - В результате отрицательные числа будут заключены в круглые скобки.

******* Ширина *******

Ширина — это минимальное количество символов, которое должно быть записано на выходе.
Для преобразования разделителя строк ширина неприменима; если он предоставлен, будет
выдано исключение.

******* Точность *******

Для общих типов аргументов точность — это максимальное количество символов, которое должно
быть записано в вывод.

Для преобразований с плавающей запятой 'e', 'E' и 'f' точностью является количество цифр
после десятичного разделителя. Если преобразование равно 'g'или 'G', то точность равна
общему количеству цифр в результирующей величине после округления. Если преобразование
'a' или 'A', то точность указывать не нужно.

Для символьных, целочисленных типов аргументов и типов аргументов даты/времени, а также
для преобразования процентов и разделителей строк точность неприменима; если указана точность,
будет выдано исключение.

******* Индекс аргумента *******

Индекс аргумента представляет собой десятичное целое число, указывающее позицию аргумента в
списке аргументов. На первый аргумент ссылается "1$", на второй - " 2$" и т. д.

Другой способ ссылаться на аргументы по положению — использовать флаг '<' ('\u003c'), который
вызывает повторное использование аргумента для предыдущего спецификатора формата.
Например, следующие два оператора дадут идентичные строки:
-------------------------------------------------------------------------------------------
   Calendar c = ...;
   String s1 = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c);

   String s2 = String.format("Duke's Birthday: %1$tm %<te,%<tY", c);
-------------------------------------------------------------------------------------------

Спецификаторы формата могут ссылаться на аргументы тремя способами:
- Явное индексирование используется, когда спецификатор формата содержит индекс аргумента.
  Индекс аргумента представляет собой десятичное целое число, указывающее позицию аргумента
  в списке аргументов. На первый аргумент ссылается "1$", на второй - "2$" и т. д.
  На аргумент можно ссылаться более одного раза.

  Например:
  formatter.format("%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s", "a", "b", "c", "d")
  // -> "d c b a d c b a"

- Относительная индексация используется, когда спецификатор формата содержит флаг '<'( '\u003c' ),
  который вызывает повторное использование аргумента для предыдущего спецификатора формата.
  Если предыдущего аргумента нет, то выбрасывается MissingFormatArgumentException.

  Например:
  formatter.format("%s %s %<s %<s", "a", "b", "c", "d")
  // -> "a b b b"
  // "c" и "d" игнорируются, потому что на них нет ссылок

- Обычное индексирование используется, когда спецификатор формата не содержит ни индекса аргумента,
  ни флага '<'. Каждому спецификатору формата, который использует обычную индексацию, назначается
  последовательный неявный индекс в списке аргументов, который не зависит от индексов, используемых
  при явной или относительной индексации.

  Например:
  formatter.format("%s %s %s %s", "a", "b", "c", "d")
  // -> "a b c d"

- Можно иметь строку формата, которая использует все формы индексации.

  Например:
  formatter.format("%2$s %s %<s %s", "a", "b", "c", "d")
  // -> "b a a b"
  // "c" и "d " игнорируются, потому что на них нет ссылок

Максимальное количество аргументов ограничено максимальным размером массива Java,
как определено в спецификации виртуальной машины Java™. Если индекс аргумента не
соответствует доступному аргументу, выбрасывается MissingFormatArgumentException.

Если аргументов больше, чем спецификаторов формата, дополнительные аргументы игнорируются.

Если не указано иное, передача null аргумента любому методу или конструктору в этом классе
вызовет NullPointerException.

-------------------------------------------------------------------------------------------
Более подробно см.: https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html